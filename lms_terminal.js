#!/usr/bin/env node

const { LMStudioClient } = require("@lmstudio/sdk");
const inquirer = require("inquirer");
const chalk = require("chalk");
const ora = require("ora");
const fs = require("fs-extra");
const readline = require("readline");
const path = require("path");
const say = require("say");

// ==== C·∫§U H√åNH ==== //
const LOG_FILE = "chat-history.txt";
const CONFIG_PATH = "config.json";
const BANNER_PATH = path.join("assets", "banner.txt");
const PROMPT_FOLDER = "prompts";

const AVAILABLE_MODELS = ["llama-3.2-1b-instruct", "tinyllama-1.1b-chat-v1.0"];

let CONFIG = {
    temperature: 0.3,
    maxTokens: 1024,
    top_p: 0.95,
    frequencyPenalty: 0.2,
    presencePenalty: 0.4,
};

let model = null;
let selectedModel = null;
let systemPrompt = "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªØu √≠ch.";
let lastPrompt = "";
let lastAnswer = "";
let enableTTS = false;
let isDevMode = false;
let conversationHistory = [];

const client = new LMStudioClient();

// ==== QU·∫¢N L√ù C·∫§U H√åNH ==== //
async function loadConfig() {
    if (await fs.pathExists(CONFIG_PATH)) {
        const saved = await fs.readJson(CONFIG_PATH);
        CONFIG = saved.CONFIG || CONFIG;
        systemPrompt = saved.systemPrompt || systemPrompt;
        console.log(chalk.cyan("üì¶ ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ config.json"));
    }
}

async function saveConfig() {
    await fs.writeJson(CONFIG_PATH, { CONFIG, systemPrompt }, { spaces: 2 });
}

// ==== CH·ªåN & T·∫¢I M√î H√åNH ==== //
async function selectModel() {
    const { modelName } = await inquirer.prompt([
        {
            type: "list",
            name: "modelName",
            message: "üîç Ch·ªçn m√¥ h√¨nh:",
            choices: AVAILABLE_MODELS,
            default: AVAILABLE_MODELS[0],
        },
    ]);
    selectedModel = modelName;
}

async function loadModel() {
    const spinner = ora(`üîÑ ƒêang t·∫£i m√¥ h√¨nh ${selectedModel}...`).start();
    try {
        model = await client.llm.model(selectedModel);
        spinner.succeed(
            `‚úÖ M√¥ h√¨nh "${chalk.green(selectedModel)}" ƒë√£ s·∫µn s√†ng.`
        );
    } catch (err) {
        spinner.fail("‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh.");
        console.error(err);
        process.exit(1);
    }
}

// ==== G·ª¨I PROMPT ==== //
async function askModel(prompt) {
    const spinner = ora("üí≠ ƒêang suy nghƒ©...").start();
    const startTime = Date.now();

    try {
        conversationHistory.push({ role: "user", content: prompt });

        const result = await model.respond(
            [{ role: "system", content: systemPrompt }, ...conversationHistory],
            CONFIG
        );

        spinner.stop();

        if (!result?.content) {
            console.log(chalk.red("‚ö†Ô∏è Kh√¥ng c√≥ n·ªôi dung tr·∫£ v·ªÅ."));
            return;
        }

        conversationHistory.push({
            role: "assistant",
            content: result.content,
        });
        lastAnswer = result.content;

        const elapsed = ((Date.now() - startTime) / 1000).toFixed(2);
        const timestamp = new Date().toLocaleString();
        const logEntry = `üïí [${timestamp}]\nüßë Ask: ${prompt}\nü§ñ Ans: ${result.content}\n‚è±Ô∏è Time: ${elapsed}s\n`;
        await fs.appendFile(LOG_FILE, logEntry + "\n", "utf8");

        console.log(chalk.cyan("\nüìã Ph·∫£n h·ªìi:"));
        console.log(chalk.whiteBright(result.content));
        console.log(
            chalk.gray(
                `‚è±Ô∏è Th·ªùi gian: ${elapsed}s | üî† Token: ${
                    result.usage?.completionTokens || "?"
                }`
            )
        );

        if (enableTTS) say.speak(result.content);
        if (isDevMode) console.log(chalk.gray("\nüß™ Raw response:"), result);
    } catch (err) {
        spinner.fail("‚ùå L·ªói ph·∫£n h·ªìi:");
        console.error(err);
    }
}

// ==== L·ªÜNH ==== //
function showHelp() {
    console.log(
        chalk.blue(`
üîß L·ªánh h·ªó tr·ª£:
--exit        Tho√°t ch∆∞∆°ng tr√¨nh
--clear       Xo√° prompt tr∆∞·ªõc
--retry       G·ª≠i l·∫°i prompt tr∆∞·ªõc
--history     Hi·ªán 5 l·ªãch s·ª≠ g·∫ßn nh·∫•t
--search      T√¨m ki·∫øm trong l·ªãch s·ª≠
--config      ƒêi·ªÅu ch·ªânh c·∫•u h√¨nh m√¥ h√¨nh
--system      C·∫≠p nh·∫≠t system prompt
--random      G·ª≠i prompt ng·∫´u nhi√™n t·ª´ file
--tts         B·∫≠t/t·∫Øt Text-to-Speech
--reset       Xo√° h·ªôi tho·∫°i hi·ªán t·∫°i
--repeat      Hi·ªán l·∫°i c√¢u tr·∫£ l·ªùi g·∫ßn nh·∫•t
--dev         B·∫≠t Developer Mode
--help        Hi·ªán h∆∞·ªõng d·∫´n
`)
    );
}

async function showRecentHistory(limit = 5) {
    try {
        const content = await fs.readFile(LOG_FILE, "utf8");
        const entries = content
            .trim()
            .split(/\n{2,}/)
            .slice(-limit);
        console.log(chalk.magenta(`üìú ${entries.length} ƒëo·∫°n g·∫ßn nh·∫•t:`));
        for (const entry of entries) {
            console.log(chalk.gray("-".repeat(40)));
            console.log(entry);
        }
    } catch {
        console.log(chalk.red("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc l·ªãch s·ª≠."));
    }
}

async function searchHistory() {
    const { keyword } = await inquirer.prompt([
        { name: "keyword", message: "üîé T·ª´ kho√° c·∫ßn t√¨m:" },
    ]);
    const content = await fs.readFile(LOG_FILE, "utf8");
    const matches = content
        .split(/\n{2,}/)
        .filter((block) => block.includes(keyword));
    if (matches.length) {
        console.log(chalk.green(`üîç T√¨m th·∫•y ${matches.length} ƒëo·∫°n:`));
        matches.forEach((entry) => console.log(chalk.gray(entry + "\n")));
    } else {
        console.log(chalk.red("‚ùå Kh√¥ng t√¨m th·∫•y."));
    }
}

async function adjustConfig() {
    const configInputs = await inquirer.prompt([
        {
            name: "temperature",
            message: "üå° Temperature (0-1):",
            default: CONFIG.temperature,
        },
        {
            name: "maxTokens",
            message: "üî¢ Max Tokens:",
            default: CONFIG.maxTokens,
        },
        { name: "top_p", message: "üìä Top-p (0-1):", default: CONFIG.top_p },
        {
            name: "frequencyPenalty",
            message: "üîÅ Frequency Penalty:",
            default: CONFIG.frequencyPenalty,
        },
        {
            name: "presencePenalty",
            message: "üß† Presence Penalty:",
            default: CONFIG.presencePenalty,
        },
    ]);
    CONFIG = {
        temperature: parseFloat(configInputs.temperature),
        maxTokens: parseInt(configInputs.maxTokens),
        top_p: parseFloat(configInputs.top_p),
        frequencyPenalty: parseFloat(configInputs.frequencyPenalty),
        presencePenalty: parseFloat(configInputs.presencePenalty),
    };
    await saveConfig();
    console.log(chalk.green("‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh."));
}

async function updateSystemPrompt() {
    const { sys } = await inquirer.prompt([
        { name: "sys", message: "üß† Nh·∫≠p system prompt m·ªõi:" },
    ]);
    systemPrompt = sys;
    await saveConfig();
    console.log(chalk.green("‚úÖ ƒê√£ c·∫≠p nh·∫≠t system prompt."));
}

async function randomPrompt() {
    const files = await fs.readdir(PROMPT_FOLDER);
    const { promptFile } = await inquirer.prompt([
        {
            name: "promptFile",
            message: "üìÅ Ch·ªçn t·∫≠p prompt:",
            type: "list",
            choices: files,
        },
    ]);
    const lines = (await fs.readFile(`${PROMPT_FOLDER}/${promptFile}`, "utf8"))
        .split(/\r?\n/)
        .filter(Boolean);
    const randomPrompt = lines[Math.floor(Math.random() * lines.length)];
    console.log(chalk.yellow(`üß™ Prompt ng·∫´u nhi√™n: ${randomPrompt}`));
    await askModel(randomPrompt);
}

// ==== PROMPT GIAO TI·∫æP ==== //
function startPrompt() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
        prompt: chalk.green("üí¨ Nh·∫≠p c√¢u h·ªèi (ho·∫∑c l·ªánh): "),
    });

    rl.prompt();

    rl.on("line", async (line) => {
        const input = line.trim();
        try {
            switch (input) {
                case "--exit":
                    rl.close();
                    return;
                case "--clear":
                    lastPrompt = "";
                    console.log(chalk.gray("üßπ Prompt tr∆∞·ªõc ƒë√£ ƒë∆∞·ª£c xo√°."));
                    break;
                case "--retry":
                    if (lastPrompt) await askModel(lastPrompt);
                    else console.log(chalk.red("‚ö†Ô∏è Kh√¥ng c√≥ prompt tr∆∞·ªõc."));
                    break;
                case "--repeat":
                    if (lastAnswer) console.log(chalk.yellow(lastAnswer));
                    else
                        console.log(
                            chalk.red("‚ö†Ô∏è Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi g·∫ßn nh·∫•t.")
                        );
                    break;
                case "--history":
                    await showRecentHistory();
                    break;
                case "--search":
                    await searchHistory();
                    break;
                case "--config":
                    await adjustConfig();
                    break;
                case "--system":
                    await updateSystemPrompt();
                    break;
                case "--random":
                    await randomPrompt();
                    break;
                case "--tts":
                    enableTTS = !enableTTS;
                    console.log(
                        chalk.green(`üîä TTS ${enableTTS ? "b·∫≠t" : "t·∫Øt"}`)
                    );
                    break;
                case "--dev":
                    isDevMode = !isDevMode;
                    console.log(
                        chalk.green(
                            `üß™ Developer mode ${isDevMode ? "b·∫≠t" : "t·∫Øt"}`
                        )
                    );
                    break;
                case "--reset":
                    conversationHistory = [];
                    console.log(chalk.gray("üîÅ ƒê√£ xo√° h·ªôi tho·∫°i hi·ªán t·∫°i."));
                    break;
                case "--help":
                    showHelp();
                    break;
                default:
                    lastPrompt = input;
                    await askModel(input);
            }
        } catch (err) {
            console.error(chalk.red("‚ùå L·ªói x·ª≠ l√Ω:"), err);
        }
        process.stdin.resume();
        rl.prompt();
    });

    rl.on("close", () => {
        console.log(chalk.green("\nüëã K·∫øt th√∫c ch∆∞∆°ng tr√¨nh."));
        process.exit(0);
    });
}

// ==== KH·ªûI ƒê·ªòNG ==== //
(async () => {
    try {
        await loadConfig();
        if (await fs.pathExists(BANNER_PATH)) {
            const banner = await fs.readFile(BANNER_PATH, "utf8");
            console.log(chalk.magenta(banner));
        }
        await selectModel();
        await loadModel();
        showHelp();
        startPrompt();
    } catch (err) {
        console.error(chalk.red("‚ùå L·ªói kh·ªüi ƒë·ªông:"), err);
    }
})();
