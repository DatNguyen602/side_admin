const nodemailer = require('nodemailer');
const { google } = require('googleapis');
const crypto = require('crypto');
require('dotenv').config();

// === OAuth2 config ===
const GMAIL_USER       = process.env.GMAIL_USER;
const CLIENT_ID        = process.env.OAUTH_CLIENT_ID;
const CLIENT_SECRET    = process.env.OAUTH_CLIENT_SECRET;
const REFRESH_TOKEN    = process.env.OAUTH_REFRESH_TOKEN;

if (!GMAIL_USER || !CLIENT_ID || !CLIENT_SECRET || !REFRESH_TOKEN) {
  console.error('‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng cho OAuth2 (GMAIL_USER, CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN)');
  process.exit(1);
}

// === T·∫°o OAuth2 client v√† set credentials ===
const oAuth2Client = new google.auth.OAuth2(CLIENT_ID, CLIENT_SECRET);
oAuth2Client.setCredentials({ refresh_token: REFRESH_TOKEN });

// === L·∫•y Access Token (v√† t·ª± ƒë·ªông refresh khi c·∫ßn) ===
async function getAccessToken() {
  try {
    const { token } = await oAuth2Client.getAccessToken();
    return token;
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y access token:', err);
    throw err;
  }
}

// === T·∫°o transporter v·ªõi OAuth2 ===
// Gi·∫£i th√≠ch: ch√∫ng ta ch·ªâ kh·ªüi t·∫°o transporter m·ªôt l·∫ßn, c√≤n getAccessToken() s·∫Ω t·ª± ƒë·ªông c·∫•p token m·ªõi m·ªói l·∫ßn g·ªçi sendMail
let cachedTransporter = null;

async function getTransporter() {
  if (cachedTransporter) {
    return cachedTransporter;
  }

  const accessToken = await getAccessToken();

  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      type:         'OAuth2',
      user:         GMAIL_USER,
      clientId:     CLIENT_ID,
      clientSecret: CLIENT_SECRET,
      refreshToken: REFRESH_TOKEN,
      accessToken, // token l·∫ßn ƒë·∫ßu; Nodemailer s·∫Ω t·ª± refresh khi expire
    },
    tls: {
      rejectUnauthorized: false, // trong tr∆∞·ªùng h·ª£p dev/local; production th√¨ n√™n lo·∫°i b·ªè d√≤ng n√†y
    },
  });

  try {
    await transporter.verify();
    console.log('‚úÖ SMTP server s·∫µn s√†ng g·ª≠i email!');
  } catch (err) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi t·ªõi SMTP server:', err);
    throw err;
  }

  cachedTransporter = transporter;
  return cachedTransporter;
}

// === H√†m g·ªëc ƒë·ªÉ g·ª≠i email ===
async function sendMail({ to, subject, html, from }) {
  try {
    const transporter = await getTransporter();
    const mailOptions = {
      from:    from || `"H·ªá th·ªëng qu·∫£n l√Ω" <${GMAIL_USER}>`,
      to,
      subject,
      html,
    };

    const info = await transporter.sendMail(mailOptions);
    console.log(`‚úÖ Email ƒë√£ g·ª≠i t·ªõi ${to}: ${info.response}`);
    return info;
  } catch (err) {
    console.error(`‚ùå L·ªói khi g·ª≠i email t·ªõi ${to}:`, err.message || err);
    throw err;
  }
}

// === H√†m g·ª≠i email chung (cho c√°c m·ª•c ƒë√≠ch tu·ª≥ √Ω) ===
async function sendEmail(email, subject, content, from) {
  return sendMail({ to: email, subject, html: content, from });
}

// === Escape HTML (ƒë∆°n gi·∫£n) ===
function escapeHtml(str = '') {
  return String(str)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

// === H√†m g·ª≠i th√¥ng b√°o ƒëƒÉng nh·∫≠p ===
async function sendLoginNotification(email, username) {
  const nowString = new Date().toLocaleString('vi-VN');
  const safeUsername = escapeHtml(username);
  const content = `
    <div style="
      font-family: Arial, sans-serif;
      max-width: 500px;
      margin: auto;
      padding: 20px;
      background-color: #ffffff;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    ">
      <div style="text-align: center;">
        <img src="https://example.com/logo.png" alt="Logo" style="width: 80px; margin-bottom: 15px;" />
        <h2 style="color: #333; margin-bottom: 10px;">üîê X√°c nh·∫≠n ƒëƒÉng nh·∫≠p</h2>
        <p style="color: #555; font-size: 16px;">
          Xin ch√†o <strong style="color: #007bff;">${safeUsername}</strong>,
        </p>
      </div>
      <div style="
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-top: 10px;
      ">
        <p style="margin: 0; font-size: 16px; color: #333;">
          B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng l√∫c:
        </p>
        <p style="
          margin: 5px 0;
          font-size: 18px;
          font-weight: bold;
          color: #28a745;
        ">
          ${escapeHtml(nowString)}
        </p>
      </div>
      <hr style="border: none; border-top: 1px solid #ddd; margin: 20px 0;" />
      <div style="text-align: center;">
        <p style="color: #dc3545; font-size: 16px;">
          N·∫øu ƒë√¢y kh√¥ng ph·∫£i b·∫°n, vui l√≤ng ƒë·ªïi m·∫≠t kh·∫©u ngay l·∫≠p t·ª©c!
        </p>
        <a href="https://example.com/change-password" style="
          display: inline-block;
          padding: 10px 20px;
          background-color: #dc3545;
          color: #fff;
          text-decoration: none;
          border-radius: 5px;
          font-size: 16px;
        ">
          ƒê·ªïi m·∫≠t kh·∫©u
        </a>
      </div>
      <p style="
        color: #666;
        font-size: 14px;
        text-align: center;
        margin-top: 20px;
      ">
        C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng c·ªßa ch√∫ng t√¥i!
      </p>
    </div>
  `;

  return sendMail({
    to:      email,
    subject: 'Th√¥ng b√°o ƒëƒÉng nh·∫≠p h·ªá th·ªëng',
    html:    content,
  });
}

// === H√†m g·ª≠i m√£ x√°c minh email ===
async function sendVerificationEmail(email, verificationCode) {
  // N·∫øu kh√¥ng truy·ªÅn verificationCode, t·ª± sinh ra 6 k√Ω t·ª± HEX
  const code = verificationCode || crypto.randomBytes(3).toString('hex').toUpperCase();

  const content = `
    <div style="
      max-width: 600px;
      margin: auto;
      padding: 20px;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f9f9f9;
      border: 1px solid #e0e0e0;
      border-radius: 10px;
    ">
      <div style="text-align: center; padding-bottom: 20px;">
        <h2 style="color: #2c3e50; margin-bottom: 0;">X√°c minh Email</h2>
        <p style="margin-top: 5px; color: #555;">B·∫£o v·ªá t√†i kho·∫£n c·ªßa b·∫°n</p>
      </div>
      <div style="
        background-color: #ffffff;
        padding: 20px;
        border-radius: 8px;
      ">
        <p>Xin ch√†o,</p>
        <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu x√°c minh ƒë·ªãa ch·ªâ email n√†y. Vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c minh b√™n d∆∞·ªõi ƒë·ªÉ ti·∫øp t·ª•c:</p>
        <div style="text-align: center; margin: 30px 0;">
          <span style="
            display: inline-block;
            font-size: 28px;
            font-weight: bold;
            letter-spacing: 3px;
            color: #2d7ef7;
            background: #eef5ff;
            padding: 10px 20px;
            border-radius: 8px;
          ">
            ${escapeHtml(code)}
          </span>
        </div>
        <p style="color: #666;">
          M√£ x√°c minh s·∫Ω h·∫øt h·∫°n sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn v√¨ l√Ω do b·∫£o m·∫≠t.
        </p>
        <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y. T√†i kho·∫£n c·ªßa b·∫°n v·∫´n an to√†n.</p>
      </div>
      <div style="
        margin-top: 30px;
        font-size: 12px;
        color: #999;
        text-align: center;
      ">
        <p>ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi.</p>
        <p>¬© ${new Date().getFullYear()} H·ªá th·ªëng c·ªßa b·∫°n. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
      </div>
    </div>
  `;

  await sendMail({
    to:      email,
    subject: 'X√°c minh email',
    html:    content,
  });

  return code;
}

module.exports = {
  sendEmail,
  sendLoginNotification,
  sendVerificationEmail,
};
