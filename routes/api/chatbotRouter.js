const express = require("express");
const router = express.Router();
const fs = require("fs");
const path = require("path");
const natural = require("natural");
const cosine = require("cosine-similarity");
const fetch = require("node-fetch");
const Answer = require("../../models/Answer");
require("dotenv").config();

const tokenizer = new natural.WordTokenizer();
const TfIdf = natural.TfIdf;

let allTerms = [];

// Ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n
function preprocess(text) {
    return tokenizer.tokenize(text.toLowerCase().replace(/[^\w\s]/gi, ""));
}

// T·∫°o vector tf-idf t·ª´ vƒÉn b·∫£n
function buildVectorFromText(rawText) {
    const tempTfidf = new TfIdf();
    tempTfidf.addDocument(rawText);
    const terms = tempTfidf.listTerms(0);
    return allTerms.map((term) => {
        const found = terms.find((t) => t.term === term);
        return found ? found.tfidf : 0;
    });
}

// T·∫°o danh s√°ch t·ª´ kh√≥a (terms) t·ª´ data.json
function buildAllTermsFromData() {
    const dataPath = path.join(__dirname, "../../public/data.json");
    const rawData = JSON.parse(fs.readFileSync(dataPath, "utf8"));
    const tfidf = new TfIdf();

    rawData.forEach((item) => tfidf.addDocument(item.question));
    const termsSet = new Set();
    for (let i = 0; i < tfidf.documents.length; i++) {
        tfidf.listTerms(i).forEach((t) => termsSet.add(t.term));
    }

    allTerms = [...termsSet];
}

// Kh·ªüi t·∫°o DB t·ª´ file data.json n·∫øu ch∆∞a c√≥
async function initDatabaseFromJSON() {
    const dataPath = path.join(__dirname, "../../public/data.json");
    const jsonData = JSON.parse(fs.readFileSync(dataPath, "utf8"));

    for (const item of jsonData) {
        const exists = await Answer.findOne({ question: item.question });
        if (!exists) {
            const vector = buildVectorFromText(
                preprocess(item.question).join(" ")
            );
            await Answer.create({
                question: item.question,
                defaultAnswer: item.answer,
                vector,
                source: "seed",
            });
        }
    }

    console.log(`‚úÖ Synced data.json into MongoDB.`);
}

buildAllTermsFromData();
initDatabaseFromJSON();

const GEMINI_KEY = process.env.GEMINI_KEY;

const bannedBrands = [
    "honda",
    "yamaha",
    "suzuki",
    "sym",
    "kymco",
    "vinfast",
    "vespa lx",
    "lx",
    "vision",
    "lead",
    "ab",
    "airblade",
    "wave",
    "future",
    "vario",
    "click",
    "dream",
    "winner",
    "exciter",
    "xe ƒëi·ªán",
    "xe vinfast",
    "peugeot",
    "sirius",
];

function containsBannedBrand(message) {
    const tokens = preprocess(message); // d√πng tokenizer c√≥ s·∫µn
    return bannedBrands.some((brand) =>
        tokens.some((token) => token.includes(brand))
    );
}

router.post("/chat", async (req, res) => {
    const { message } = req.body;
    if (!message) return res.status(400).json({ error: "Message is required" });

    if (containsBannedBrand(message)) {
        return res.json({
            answer: "Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn Piaggio.",
            confidence: "1.000",
            source: "blocked-brand",
        });
    }

    const processedMessage = preprocess(message).join(" ");
    const userVector = buildVectorFromText(processedMessage);

    const allAnswers = await Answer.find({});
    let bestMatch = null;
    let highestScore = -1;

    for (let item of allAnswers) {
        const score = cosine(userVector, item.vector);
        if (score > highestScore) {
            highestScore = score;
            bestMatch = item;
        }
    }

    const THRESHOLD = 0.75;

    // N·∫øu c√¢u h·ªèi g·∫ßn gi·ªëng c√¢u ƒë√£ c√≥
    if (highestScore >= THRESHOLD && bestMatch) {
        if (bestMatch.geminiAnswer) {
            return res.json({
                answer: bestMatch.geminiAnswer,
                confidence: highestScore.toFixed(3),
                source: "cached-gemini",
            });
        }

        // Ch∆∞a c√≥ geminiAnswer ‚Üí t·∫°o m·ªõi t·ª´ Gemini
        const prompt = `
        User's Question:
        "${message}"

        Suggested Answer:
        "${bestMatch.defaultAnswer || "No answer available."}"

        üéØ Task:
        Improve the suggested answer to sound more helpful, friendly, and professional ‚Äî like a Piaggio expert talking to a curious customer in an easy-to-understand and respectful way.

        üîç Important:
        Only discuss topics related to **Piaggio** ‚Äî its vehicles, history, technology, services, or brand values. 
        If the current answer is outdated, incomplete, or unclear, feel free to enhance it ‚Äî but only with information about Piaggio.
        If the user's question is not related to Piaggio, kindly avoid answering or gently let them know you're focused on Piaggio topics.

        üìå Style Guidelines:
        - Keep the answer in the same language as the question.
        - Be informative but conversational ‚Äî confident yet warm.
        - Avoid comparing Piaggio with any other brands or mentioning competitors.
        - If needed, enrich the answer with extra Piaggio facts, insights, or practical tips.
        - Return just one polished, natural-sounding answer ‚Äî no bullet points or side notes.

        ‚úÖ Output:
        [One friendly, knowledgeable response ‚Äî focused entirely on Piaggio.]
        `;

        const geminiRes = await fetch(
            `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_KEY}`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: prompt }] }],
                }),
            }
        );

        const dataRes = await geminiRes.json();
        const geminiText = dataRes?.candidates?.[0]?.content?.parts?.[0]?.text;

        if (geminiText) {
            bestMatch.geminiAnswer = geminiText;
            await bestMatch.save();
        }

        return res.json({
            answer: geminiText || bestMatch.defaultAnswer,
            confidence: highestScore.toFixed(3),
            source: "generated-from-default",
        });
    }

    // Kh√¥ng t√¨m th·∫•y c√¢u gi·ªëng ‚Üí t·∫°o m·ªõi ho√†n to√†n t·ª´ Gemini
    const fallbackPrompt = `
    User's Question:
    "${message}"

    üéØ Task:
    Answer the question in a helpful, natural, and expert manner ‚Äî but only if it is clearly related to **Piaggio**, the Italian vehicle manufacturer.

    üìå Requirements:
    - Only answer if the question is about Piaggio ‚Äî its scooters, motorcycles, technologies, history, services, or brand.
    - If the question is not related to Piaggio, respond politely by explaining that your knowledge is limited to Piaggio topics.
    - Do NOT include or refer to any other brands, companies, or comparisons.
    - Use the same language as the user's question.
    - Keep the tone warm, professional, and easy to understand.
    - Output just one clear and concise answer ‚Äî no footnotes, no lists, no extra formatting.

    ‚úÖ Output:
    [One friendly, informative answer about Piaggio or a polite refusal if not applicable.]
    `;

    const fallbackRes = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_KEY}`,
        {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                contents: [{ parts: [{ text: fallbackPrompt }] }],
            }),
        }
    );

    const fallbackData = await fallbackRes.json();
    const generatedAnswer =
        fallbackData?.candidates?.[0]?.content?.parts?.[0]?.text ||
        "T√¥i ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi ph√π h·ª£p.";

    await Answer.create({
        question: message,
        geminiAnswer: generatedAnswer,
        vector: userVector,
        source: "manual",
    });

    return res.json({
        answer: generatedAnswer,
        confidence: "0.000",
        source: "generated-new",
    });
});

module.exports = router;
